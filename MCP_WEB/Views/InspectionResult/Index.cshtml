@model MCP_WEB.Models.VW_MFC_Header_Route_stage
<style>

    a {
        text-decoration: none !important;
    }

    .dx-link-edit-4x {
        /*padding-right: 2px;*/
        font-size: 1.2em;
        width: auto;
        height: auto;
    }

    /*.dx-datagrid-revert-tooltip {
        display: none;
    }*/

    .dx-datagrid-rowsview .dx-data-row .dx-cell-modified .dx-highlight-outline::after {
        border-color: transparent;
    }
</style>
<div id="addscrollpop" class="scrollpop">
    <div class="addcontentpop">
      
        @using (Html.BeginForm())
        {
            using (Html.DevExtreme().ValidationGroup())
            {
                @Html.AntiForgeryToken()
                <form id="form1" name="form1">
                    <div class="form-group">
                        <label class="col-lg-2">Production Order No.<span style="color:red;">*</span></label>
                        <div class="col-lg-4" style="padding-bottom:10px;">
                            @(Html.DevExtreme().TextBox().ID("txtDocNum").Name("DocNum").OnChange("docnum_changed").Placeholder("100070"))
                        </div>
                        <label class="col-lg-2">Status.</label>
                        <div class="col-lg-4" style="padding-bottom:10px;">
                            @(Html.DevExtreme().TextBox().ID("txtStatus").Name("Status").Disabled(true).InputAttr("style", "background-color: lightgray; color:black; font-weight: bold;"))
                        </div>
                        <label class="col-lg-2">Sale Order No.</label>
                        <div class="col-lg-4" style="padding-bottom:10px;">
                            @(Html.DevExtreme().TextBox().ID("txtOriginNum").Name("OriginNum").Disabled(true).InputAttr("style", "background-color: lightgray; color:black; font-weight: bold;"))
                        </div>
                        <label class="col-lg-2">Product No.</label>
                        <div class="col-lg-4" style="padding-bottom:10px;">
                            @(Html.DevExtreme().TextBox().ID("txtItemCode").Name("ItemCode").Disabled(true).InputAttr("style", "background-color: lightgray; color:black; font-weight: bold;"))
                        </div>
                        <label class="col-lg-2">Product Description</label>
                        <div class="col-lg-4" style="padding-bottom:10px;">
                            @(Html.DevExtreme().TextBox().ID("txtProdName").Name("ProdName").Disabled(true).InputAttr("style", "background-color: lightgray; color:black; font-weight: bold;"))
                        </div>
                        <label class="col-lg-2">Planed Quantity</label>
                        <div class="col-lg-4" style="padding-bottom:10px;">
                            @(Html.DevExtreme().TextBox().ID("txtPlannedQty").Name("PlannedQty").Disabled(true).InputAttr("style", "background-color: lightgray; color:black; font-weight: bold;"))
                        </div>
                        <label class="col-lg-2">UOM</label>
                        <div class="col-lg-4" style="padding-bottom:10px;">
                            @(Html.DevExtreme().TextBox().ID("txtUom").Name("Uom").Disabled(true).InputAttr("style", "background-color: lightgray; color:black; font-weight: bold;"))
                        </div>
                        <label class="col-lg-2">Start Date</label>
                        <div class="col-lg-4" style="padding-bottom:10px;">
                            @(Html.DevExtreme().TextBox().ID("txtStartDate").Name("StartDate").Disabled(true).InputAttr("style", "background-color: lightgray; color:black; font-weight: bold;"))
                        </div>
                        <label class="col-lg-2">Due Date</label>
                        <div class="col-lg-4" style="padding-bottom:10px;">
                            @(Html.DevExtreme().TextBox().ID("txtDueDate").Name("DueDate").Disabled(true).InputAttr("style", "background-color: lightgray; color:black; font-weight: bold;"))
                        </div>
                                                
                        <label class="col-lg-8"></label>
                        <div class="col-lg-4" style="padding-bottom:10px;">
                        </div>
                            <label class="col-lg-2">Route Stage</label>
                            <div class="col-lg-10" style="padding-bottom:10px;">
                                @*<div id="gridBox"></div>*@
                                @(Html.DevExtreme().DropDownBox()
                                                    .Value("")
                                                    .ID("gridBox")
                                                    //.ValueExpr("Code")
                                                    //.DisplayExpr("Name")
                                                    .Width("100%")
                                        //.DataSource(d => d.Mvc()
                                        //.Controller("GirdInspectionResult")
                                        //.LoadAction("Get_Routestage"))
                                        //.Placeholder("Select a value...")
                                        //.ShowClearButton(true)
                                        //.OnValueChanged("gridBox_valueChanged")
                                        //.ContentTemplate(new TemplateName("EmbeddedDataGridSingle"))

                                )

                            </div>
                            <div class="col-lg-12" style="padding-bottom:10px;">
                                @(Html.DevExtreme().DataGrid<MCP_WEB.Models.VW_MFC_M_INSPECT_RESULT>()
                                                                .ID("gridInspection")
                                                                //.DataSource(ds => ds.Mvc()
                                                                //.Controller("GirdInspectionResult")
                                                                //.LoadAction("Get_RoutestageSUB")
                                                                //.LoadParams(new { DocEntry = "117" })
                                                                //.Key("U_AbsEntry")
                                                                //)
                                                                //.Editing(editing =>
                                                                //{
                                                                //    editing.Mode(GridEditMode.Batch);
                                                                //    editing.AllowUpdating(true);

                                                                //})
                                                                //.OnToolbarPreparing("ontoolbarItem")
                                                                .OnCellPrepared("onCellPrepared")
                                                                .RowAlternationEnabled(true)
                                                                .Selection(s => s.Mode(SelectionMode.Multiple)
                                                                .ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always)
                                                                .SelectAllMode(SelectAllMode.Page))
                                                                .Paging(paging => paging.Enabled(true))
                                                                .RemoteOperations(true)
                                                                .AllowColumnReordering(true)
                                                                .AllowColumnResizing(true)
                                                                //.HeaderFilter(headerFilter => headerFilter.Visible(true))

                                                                .Export(e => e.Enabled(true).FileName("Route_stage_SUB" + DateTime.Now).AllowExportSelectedData(true))

                                                                //.ColumnChooser(c => c.Enabled(true))
                                                                .ShowBorders(true)
                                                                .ShowRowLines(true)
                                                                //.Grouping(grouping => grouping.AutoExpandAll(true))
                                                                //.GroupPanel(groupPanel => groupPanel.Visible(true))
                                                                //.OnRowPrepared("rowcolor")
                                                                //.OnToolbarPreparing("toolbar_preparing")
                                                                .ColumnMinWidth(100)
                                                                .ColumnAutoWidth(true)
                                                                .ColumnHidingEnabled(true)
                                                                .Columns(columns =>
                                                                {
                                                                        //columns.Add().Caption("Edit or Delete").Width(125).Alignment(HorizontalAlignment.Center)
                                                                        //.CellTemplate(new JS("cellTemplate")).AllowExporting(false);

                                                                        //columns.Add().DataField("UserId").Caption("User Id").ShowInColumnChooser(false).Visible(false);

                                                                        //columns.Add().DataField("U_AbsEntry").Caption("DocEntry IN");
                                                                        columns.Add().DataField("Code").Visible(false);
                                                                        columns.Add().DataField("U_StgEntry").Visible(false);
                                                                        columns.Add().DataField("U_InspectEntry").Visible(false);
                                                                        columns.Add().DataField("U_RptOrdering").Visible(false);
                                                                    columns.Add().DataField("U_InspectMethod").Caption("Method Desc");
                                                                    columns.Add().DataField("U_PassQty").Caption("Pass Qty");
                                                                    columns.Add().DataField("U_RejQty").Caption("Reject Qty");
                                                                    columns.Add().DataField("U_Reason").Caption("Reject Reason");
                                                                    columns.Add().DataField("U_Comment").Caption("Comment");
                                                                    columns.Add().DataField("U_UpdateBy").Caption("Last update by");
                                                                    columns.Add().DataField("U_UpdateDate").Caption("Last update date").DataType(GridColumnDataType.DateTime).Format("dd/MM/yyyy");
                                                                        //.GroupIndex(0);

                                                                        //columns.Add().DataField("CreateDate").Caption("Create Date").DataType(GridColumnDataType.Date).Format(ViewBag.GlobalDtFormat).AllowSearch(true)

                                                                        //.Visible(false);
                                                                        //columns.Add().DataField("UserCreated").Caption("User Created").Visible(false);
                                                                        //columns.Add().DataField("TransDate").Caption("Trans Date")
                                                                        //.DataType(GridColumnDataType.Date).Format(ViewBag.GlobalDtFormat).AllowSearch(true)

                                                                        //.Visible(false);

                                                                        //columns.Add()
                                                                        //.DataField("LastSignedin").Caption("Last Signed in")
                                                                        //.AllowSearch(true)
                                                                        //.DataType(GridColumnDataType.DateTime)
                                                                        //.Format(ViewBag.GlobalDtFormat);
                                                                        //columns.Add().DataField("ModifyBy").Caption("Modify By").Visible(false);

                                                                    })


                                                                     .Paging(paging => paging.PageSize(10))
                                                                            .Pager(p => p
                                                                            .AllowedPageSizes(new int[] { 10, 25, 50, 100 })
                                                                            .ShowInfo(true)
                                                                            .ShowNavigationButtons(true)
                                                                            .ShowPageSizeSelector(true)
                                                                            .Visible(true))
                                                                    .HeaderFilter(h => h.Visible(true))
                                                                    //.FilterPanel(f => f.Visible(true))
                                                                    //.FilterValue(filterValue)
                                                                    .FilterRow(filterRow => filterRow
                                                                    .Visible(true)
                                                                    .ApplyFilter(GridApplyFilterMode.Auto)
                                                                    )
                                                                    .SearchPanel(searchPanel => searchPanel
                                                                    .Visible(true)
                                                                    .Width(185)
                                                                    .Placeholder("Search...")
                                                                    ).OnEditingStart("editstart").OnEditorPrepared("onEditorPrepared")
                                )
                            </div>

                            <div class="col-sm-offset-2 col-sm-10" style="text-align:right; padding-bottom:10px;">
                                <div id="selection-treeview"></div>
                                <div class="selected-data">
                                    <div id="checked-items"></div>
                                </div>
                                @(Html.DevExtreme().Button().ID("addbtnSave")
                                                                                            .Text("Save").Type(ButtonType.Success)
                                                                                            .Disabled(true).FocusStateEnabled(true)
                                                                                            .OnClick("SaveInspection"))
                                @(Html.DevExtreme().Button().Type(ButtonType.Normal).ID("addbtnCancel")
                                                                                            .Text("Cancel")
                                                                                            .OnClick("function (e) { location.reload(); }"))
                            </div>
                        </div>
</form>
            }
        }
    </div>
</div>
               
<script>

    var arrdata = [];
    var allowupdate = true;
    var txtPlannedQty = 0;
    var arr_INOUT = "";
    var type = "";
    var Entry_docnum = 0;
    var U_DocNum = 0;
function SaveInspection(data) {
var grid = $("#gridInspection").dxDataGrid('instance');
//$("#gridInspection").dxDataGrid("saveEditData");

//grid.saveEditData();
console.log(arrdata);
//$.ajax({
//    type: 'POST',
//    url: "api/GirdInspectionResult/Putdata",
//    data: { key: 11, values: "xxxx" },
//    async: false,
//    beforeSend: function () {/*loading*/ },
//    dataType: 'json',
//    success: function (result) {
//        console.log(result);
//    }
//});
    if (arrdata.length > 0) {
        $.ajax({
            type: 'POST',
            //contentType: 'application/json',
            url: 'api/GirdInspectionResult/Putdata',
            data: { values: JSON.stringify(arrdata), "type": type, "U_DocEntry": Entry_docnum, "U_DocNum": U_DocNum},
            dataType: 'json',
            success: function (result) {
                console.log(result[0].U_AbsEntry);
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("Get_RoutestageSUB", "GirdInspectionResult")',
                    data: { "U_StgEntry": result[0].U_StgEntry,"Docentry":Entry_docnum },
                    dataType: 'json',
                    success: function (result_R) {
                        console.log(result_R["items"][0].status);
                        if (result_R["items"][0].status) {
                            var datasourceR = result_R["items"][0].data;
                            grid.option("dataSource", datasourceR);
                            grid.refresh();
                            DevExpress.ui.notify("Edit data success.", "success", 1500);
                            arrdata = [];
                            //console.log(arrdata);
                            type = "transection";
                        }
                    }
                });
            }
        });
    } else {
        grid.refresh();
        arrdata = [];
        DevExpress.ui.notify("Edit data success.", "success", 1500);

    }


}

function ontoolbarItem(e) {
    var toolbarItems = e.toolbarOptions.items;
    $.each(toolbarItems, function (_, item) {
        if (item.name == "saveButton" || item.name == "revertButton") {
            item.visible = true;
        }
    });
}

function editstart(e) {
$("#addbtnSave").dxButton({
    disabled: false
    //elementAttr: {
    //    id: "elementId",
    //    class: "class-name"
    //}
});
}
function onEditorPrepared(e) {
    if (e.parentType === "dataRow") {
        e.editorOptions.onFocusIn = function (args) {
            args.element.find("input").select();
            //console.log(args);
        };
        if (e.dataField == "U_RejQty" || e.dataField == "U_PassQty") {
            e.editorElement.dxNumberBox('instance').option('onValueChanged', args => {
                e.setValue(args.value);

                arrdata.push(e.row.data);
                arrdata = arrdata.filter((el) => {
                    return el.Code !== e.row.data.Code;
                });
                arrdata.push(e.row.data);
                console.log(arrdata);
            });
        }

        if (e.dataField == "U_Reason") {
            e.editorElement.dxTextBox('instance').option('onValueChanged', args => {
                e.setValue(args.value);

                arrdata.push(e.row.data);
                arrdata = arrdata.filter((el) => {
                    return el.Code !== e.row.data.Code;
                });
                arrdata.push(e.row.data);
                console.log(arrdata);
            });
        }

        if (e.dataField == "U_Comment") {
            e.editorElement.dxTextArea('instance').option('onValueChanged', args => {
                e.setValue(args.value);

                arrdata.push(e.row.data);
                arrdata = arrdata.filter((el) => {
                    return el.Code !== e.row.data.Code;
                });
                arrdata.push(e.row.data);
                console.log(arrdata);
            });
        }

        //var tb = e.editorElement.dxTextBox('instance');
        ////tb.option('valueChangeEvent', 'keydown keyup')
        //tb.option('onValueChanged', function (ea) {
        //    e.setValue(ea.value);
        //    //$("#btnSave" + e.row.key).dxButton("instance").option("disabled", !e.component.getController("validating").validate());
        //    console.log(ea.component.option("isValid"));
        //});
    }

    //if (e.parentType == "dataRow" || e.dataField == "U_RejQty" ) {

    //    //arrdata.push(e.row.data);
    //    arrdata = arrdata.filter((el) => {
    //        return el.DocEntry !== e.row.data.DocEntry;
    //    });
    //    arrdata.push(e.row.data);
    //    //console.log(arrdata);
    //}
}

function onCellPrepared(e) {
    if (e.rowType === 'data' && e.rowIndex != undefined) {
        if (e.column.dataField == "U_InspectMethod" || e.column.dataField == "U_UpdateBy" || e.column.dataField == "U_UpdateDate") {
            e.cellElement.css("background-color", "lightgray");
        }
        console.log(type);
        if (type == "master") {
            //arrdata = [];
            arrdata.push(e.data);
            arrdata = arrdata.filter((el) => {
                return el.Code !== e.data.Code;
            });
            arrdata.push(e.data);
        }
        console.log(arrdata);

        //console.log(e.column.command);
        //console.log(e.data);

    }
}

function docnum_changed() {
var grid = $("#gridInspection").dxDataGrid('instance');
//grid.getController("editing").isEditing()
//$("#txtOriginNum").find("input").css({ "background": "lightgray", "color": "black"});
    var txtDocNum = $("#txtDocNum").dxTextBox('instance').option('value');
    U_DocNum = parseInt(txtDocNum);
    var docentry = "";
    var dataGrid;
    var source_Routestage;
    @*source_Routestage = DevExpress.data.AspNet.createStore({
        //"key": "ID",
    "loadUrl": "@Url.Action("Get_Routestage", "GirdInspectionResult", new { httproute = true })",
    "loadParams": { "DocEntry": "117"}
});*@
    $("#txtOriginNum").dxTextBox('instance').option('value', '');
    $("#txtItemCode").dxTextBox('instance').option('value', '');
    $("#txtProdName").dxTextBox('instance').option('value', '');
    $("#txtPlannedQty").dxTextBox('instance').option('value', '');
    $("#txtUom").dxTextBox('instance').option('value', '');
    $("#txtStartDate").dxTextBox('instance').option('value','');
    $("#txtDueDate").dxTextBox('instance').option('value', '');
    //$("#gridBox").dxDropDownBox("option", "dataSource", []);
    //$("#gridBox").dxDropDownBox("instance").option("dataSource", "");
    grid.option("dataSource","");

if (!isNaN(txtDocNum)) {
    $.ajax({
        type: 'GET',
        url: '@Url.Action("Get", "GirdInspectionResult", new { httproute = true })',
        data:{"docnum":txtDocNum},
        dataType: 'json',
        success: function (result) {
            //console.log(result.data.length);
            if (result) {
                if (result.data.length > 0) {
                    $.each(result, function (item, value) {
                    $("#txtStatus").dxTextBox('instance').option('value', value[0].Status);
                    $("#txtOriginNum").dxTextBox('instance').option('value', value[0].OriginNum);
                    $("#txtItemCode").dxTextBox('instance').option('value', value[0].ItemCode);
                    $("#txtProdName").dxTextBox('instance').option('value', value[0].ProdName);
                    $("#txtPlannedQty").dxTextBox('instance').option('value', value[0].PlannedQty);
                    $("#txtUom").dxTextBox('instance').option('value', value[0].Uom);
                    $("#txtStartDate").dxTextBox('instance').option('value', value[0].StartDate);
                    $("#txtDueDate").dxTextBox('instance').option('value', value[0].DueDate);
                        docentry = value[0].DocEntry;
                        Entry_docnum = value[0].DocEntry;
                    //console.log(docentry);
                    //console.log(source_Routestage);
                    txtPlannedQty = parseFloat(value[0].PlannedQty);
                });

                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("Get_Routestage", "GirdInspectionResult")',
                        data: { "DocEntry": docentry },
                        dataType: 'json',
                        success: function (datax) {
                            console.log(datax);
                            if (datax) {
                            $("#gridBox").dxDropDownBox({
                                dataSource: datax.data,
                                value: function (val) { },
                                valueExpr: "DocEntry",
                                deferRendering: false,
                                placeholder: "Select a Route stage...",
                                //showClearButton: true,
                                displayExpr: function (item) {
                                    if (item) {
                                        return item.Code + "++" + item.Name;
                                    }

                                },

                                contentTemplate: function (e) {
                                    //var value = e.component.option("value")
                                    console.log(e.component.option("dataSource"));
                                    $dataGrid = $("<div>").dxDataGrid({
                                        dataSource: e.component.option("dataSource"),
                                        columns: [{ dataField: "Code", caption: "No." }, { dataField: "Name", caption: "Description" }, { dataField: "Status", caption: "Status" }],
                                        hoverStateEnabled: true,
                                        showRowLines: true,
                                        paging: { enabled: true, pageSize: 10 },
                                        filterRow: { visible: true },
                                        scrolling: { mode: "infinite" },
                                        selection: { mode: "single" },
                                        //selectedRowKeys: [value],
                                        height: "100%",
                                        onSelectionChanged: function (selectedItems) {                                            
                                            arrdata = [];
                                            //console.log("arrdata",arrdata);
                                            var gridItems = $("#gridInspection").dxDataGrid('instance');
                                            gridItems.refresh();
                                            var keys = selectedItems.selectedRowKeys,
                                                hasSelection = keys.length;
                                            //console.log(keys);
                                            e.component.option("value", keys.length > 0 ? keys[0].Code + "  " + keys[0].Name : null);
                                            @*var datasourceR = DevExpress.data.AspNet.createStore({
                                                "loadUrl": "@Url.Action("Get_RoutestageSUB", "GirdInspectionResult", new { httproute = true })",
                                                "loadParams": { "DocEntry": keys[0].DocEntry, "Code": keys[0].Code}
                                            });*@
                                            console.log(keys[0].Status);
                                            if (keys[0].Status == "Complate" || keys[0].Status == "Planned") {
                                                allowupdate = false;
                                            } else { allowupdate = true; }

                                            //console.log(allowupdate);
                                            $.ajax({
                                                type: 'GET',
                                                url: '@Url.Action("Get_RoutestageSUB", "GirdInspectionResult")',
                                                data: { "U_StgEntry": keys[0].AbsEntry, "Docentry": docentry },
                                                dataType: 'json',
                                                success: function (result_R) {
                                                    console.log(result_R["items"][0].data.length);
                                                    if (result_R["items"][0].status) {

                                                        var datasourceR = result_R["items"][0].data;
                                                        type = result_R["items"][0].type;
                                                        if (result_R["items"][0].data.length > 0) {//check case ที่เลือก route stage มาแล้วมีข้อมูล transection ไหม
                                                            if (type != undefined || type == "master") {// ถ้าเป็นข้อมูลที่ดึกมาจาก master เพราะยังไม่มี transection
                                                                $("#addbtnSave").dxButton({
                                                                    disabled: false
                                                                });
                                                            }
                                                            if (type == undefined || type == "" || type == "transection") {
                                                                console.log("type", type);
                                                                $("#addbtnSave").dxButton({
                                                                    disabled: true
                                                                });
                                                            }
                                                        } else {
                                                            $("#addbtnSave").dxButton({
                                                                disabled: true
                                                            });
                                                        }
                                                       
                                                        $("#gridInspection").dxDataGrid({
                                                            dataSource: datasourceR,
                                                            columns: [{
                                                                dataField: "U_InspectMethod",
                                                                caption: "Inspection Method",
                                                                //validationRules: [{ type: "required" }]
                                                            }, {
                                                                dataField: "U_PassQty",
                                                                caption: "Pass Qty",
                                                                validationRules: [//{ type: "required" },
                                                                    {
                                                                        type: "custom",
                                                                        //message: "Please input [PassQty, RejectQty] Must not be over To PlannedQty.",
                                                                        validationCallback: function (options) {

                                                                            //var rowOptions = options.validator.element().parent().data('options');
                                                                            //console.log(rowOptions);
                                                                            var gridInspection = $("#gridInspection").dxDataGrid('instance');
                                                                            var key = options.validator.option("validationGroup").key;
                                                                            var rowIndex = gridInspection.getRowIndexByKey(key);
                                                                            //var index = rowOptions.rowIndex;
                                                                            //alert(rowIndex);
                                                                            var rejectqty = gridInspection.cellValue(rowIndex, 'U_RejQty');
                                                                            console.log(rejectqty);
                                                                            var RejectQty = parseFloat(rejectqty == undefined ? 0 : rejectqty == null ? 0 : rejectqty);
                                                                            var PassQty = parseFloat(options.value == undefined ? 0 : options.value == null ? 0 : options.value);
                                                                            var total = RejectQty + PassQty;
                                                                            //console.log("total", total + "<=" + txtPlannedQty)
                                                                            //var sumPassQty = [];
                                                                            //var sumRejectQty = [];
                                                                            //for (var i = 0; i < arrdata.length; i++) {
                                                                            //    sumPassQty.push(arrdata[i].U_PassQty);
                                                                            //    sumRejectQty.push(arrdata[i].U_RejQty);
                                                                            //}
                                                                            //var passqty = sumPassQty.reduce((a, b) => a + b, 0);
                                                                            //var rejectqty = sumRejectQty.reduce((a, b) => a + b, 0);
                                                                            //var totals = parseFloat(passqty) + parseFloat(rejectqty)
                                                                            ////console.log("totals", totals + "<=" + txtPlannedQty)
                                                                            //var Vgroup0 = options.rule.validator._validationGroup.isValid;
                                                                            var flag = false;
                                                                            var U_PassQty = gridInspection.cellValue(rowIndex, 'U_PassQty');
                                                                            //console.log(U_PassQty);
                                                                            if (U_PassQty == undefined || U_PassQty == null) {
                                                                                options.rule.message = "Pass Qty is required.";
                                                                                $("#addbtnSave").dxButton({
                                                                                    disabled: true
                                                                                });
                                                                                //gridInspection.cellValue(rowIndex, "U_PassQty", 0);
                                                                            } else {
                                                                                if (parseFloat(total) > parseFloat(txtPlannedQty)) {
                                                                                    options.rule.message = "Please input [PassQty, RejectQty] Must not be over To PlannedQty.";
                                                                                    $("#addbtnSave").dxButton({
                                                                                        disabled: true
                                                                                    });
                                                                                } else {
                                                                                    flag = true;
                                                                                    if (arr_INOUT == "out") {
                                                                                        $("#addbtnSave").dxButton({
                                                                                            disabled: false
                                                                                        });
                                                                                    } else {
                                                                                        $("#addbtnSave").dxButton({
                                                                                            disabled: true
                                                                                        });
                                                                                    }
                                                                                }
                                                                            }
                                                                            return flag;

                                                                        }
                                                                    }
                                                                ]
                                                            }, {
                                                                dataField: "U_RejQty",
                                                                caption: "Reject Qty",
                                                                validationRules: [//{ type: "required" },
                                                                    {
                                                                        type: "custom",
                                                                        //message: "Please input [PassQty, RejectQty] Must not be over To PlannedQty.",
                                                                        validationCallback: function (options) {

                                                                            //var rowOptions = options.validator.element().parent().data('options');
                                                                            //console.log(rowOptions);
                                                                            var gridInspection = $("#gridInspection").dxDataGrid('instance');
                                                                            var key = options.validator.option("validationGroup").key;
                                                                            var rowIndex = gridInspection.getRowIndexByKey(key);
                                                                            //var index = rowOptions.rowIndex;
                                                                            //alert(rowIndex);
                                                                            var passqty = gridInspection.cellValue(rowIndex, 'U_PassQty');
                                                                            var PassQty = parseFloat(passqty == undefined ? 0 : passqty);
                                                                            var RejectQty = parseFloat(options.value);
                                                                            var total1 = RejectQty + PassQty;
                                                                            //var sumPassQty = [];
                                                                            //var sumRejectQty = [];
                                                                            //for (var i = 0; i < arrdata.length; i++) {
                                                                            //    sumPassQty.push(arrdata[i].U_PassQty);
                                                                            //    sumRejectQty.push(arrdata[i].U_RejQty);
                                                                            //}
                                                                            //var passqty = sumPassQty.reduce((a, b) => a + b, 0);
                                                                            //var rejectqty = sumRejectQty.reduce((a, b) => a + b, 0);
                                                                            //var totals1 = parseFloat(passqty) + parseFloat(rejectqty)
                                                                            ////console.log("totals", totals1 + "<=" + txtPlannedQty)
                                                                            //var Vgroup1 = options.rule.validator._validationGroup.isValid;
                                                                            //console.log(options.rule.validator._validationGroup.isValid);
                                                                            var U_RejQty = gridInspection.cellValue(rowIndex, 'U_RejQty');
                                                                            var flag = false;
                                                                            if (U_RejQty == undefined || U_RejQty == null) {
                                                                                gridInspection.cellValue(rowIndex, 'U_RejQty',0);
                                                                                //options.rule.message = "Reject Qty is required.";
                                                                                //$("#addbtnSave").dxButton({
                                                                                //    disabled: true
                                                                                //});
                                                                            } else {
                                                                                if (parseFloat(total1) > parseFloat(txtPlannedQty)) {
                                                                                    options.rule.message = "Please input [PassQty, RejectQty] Must not be over To PlannedQty.";
                                                                                    $("#addbtnSave").dxButton({
                                                                                        disabled: true
                                                                                    });
                                                                                } else {
                                                                                    flag = true;
                                                                                    if (arr_INOUT == "out") {
                                                                                        $("#addbtnSave").dxButton({
                                                                                            disabled: false
                                                                                        });
                                                                                    } else {
                                                                                        $("#addbtnSave").dxButton({
                                                                                            disabled: true
                                                                                        });
                                                                                    }

                                                                                }

                                                                            }
                                                                            // console.log("total", total1 + "<=" + txtPlannedQty);
                                                                            return flag;

                                                                        }
                                                                    }]
                                                            }, {
                                                                dataField: "U_Reason",
                                                                caption: "Reject Reason",
                                                                //validationRules: [{ type: "required" }]
                                                            }, {
                                                                dataField: "U_Comment",
                                                                caption: "Comment",
                                                                //validationRules: [{ type: "required" }]
                                                            }, {
                                                                dataField: "U_UpdateBy",
                                                                caption: "Last update by"
                                                            }, {
                                                                dataField: "U_UpdateDate",
                                                                caption: "Last update date",
                                                                dataType: "date",
                                                                format: 'dd/MM/yyyy'
                                                            }
                                                            ],
                                                            editing: {
                                                                mode: "batch",
                                                                allowUpdating: allowupdate,
                                                                //allowUpdating: true,
                                                                //selectTextOnEditStart: true,
                                                                startEditAction: "dblClick"
                                                            },
                                                            onEditorPreparing: function (e) {
                                                                if (e.parentType === "dataRow") {

                                                                    if (e.dataField === "U_Comment") {
                                                                        e.editorName = "dxTextArea";
                                                                    }
                                                                    if (e.dataField === "U_InspectMethod" || e.dataField === "U_UpdateBy" || e.dataField === "U_UpdateDate") {
                                                                        e.editorOptions.disabled = true;
                                                                    }
                                                                    var oldOnValueChanged = e.editorOptions.onValueChanged;
                                                                    e.editorOptions.onValueChanged = function (args) {
                                                                        oldOnValueChanged.apply(this, arguments);
                                                                        console.log(this);
                                                                        //oldOnValueChanged = () => console.log('change value');

                                                                    }
                                                                }
                                                                e.editorElement.focusout(function (e) {
                                                                    arr_INOUT = "out";
                                                                    //console.log("out");
                                                                    $("#addbtnSave").dxButton({
                                                                        disabled: false
                                                                    });
                                                                });
                                                                e.editorElement.focusin(function (i) {
                                                                    //console.log("in");
                                                                    arr_INOUT = "in";
                                                                    $("#addbtnSave").dxButton({
                                                                        disabled: true
                                                                    });
                                                                });

                                                                //if (e.parentType === "dataRow") {// return;

                                                                //    //arrdata.push(e.row.data);
                                                                //    //arrdata = arrdata.filter((el) => {
                                                                //    //    return el.DocEntry !== e.row.data.DocEntry;
                                                                //    //});
                                                                //    //arrdata.push(e.row.data);
                                                                //}

                                                                //console.log(e.row.data.DocEntry);
                                                            },
                                                            //onCellClick: function (e) {
                                                            //    //console.log(e);
                                                            //    //console.log(e.column);
                                                            //    if (e) {
                                                            //        $("#addbtnSave").dxButton({
                                                            //            disabled: true
                                                            //        });
                                                            //    } else {
                                                            //        $("#addbtnSave").dxButton({
                                                            //            disabled: true
                                                            //        });
                                                            //    }
                                                            //},
                                                            //onEditingStart: function (e) {
                                                            //    $("#addbtnSave").dxButton({
                                                            //        disabled: false
                                                            //        //elementAttr: {
                                                            //        //    id: "elementId",
                                                            //        //    class: "class-name"
                                                            //        //}
                                                            //    });
                                                            //}
                                                            onToolbarPreparing: function (e) {
                                                                var toolbarItems = e.toolbarOptions.items;
                                                                $.each(toolbarItems, function (_, item) {
                                                                    if (item.name == "saveButton") {
                                                                        item.visible = false;
                                                                    }
                                                                    if (item.name == 'revertButton') {
                                                                        item.options.onClick = function (arg) {
                                                                            e.component.cancelEditData();
                                                                            //e.component.option('editing.allowUpdating', true);
                                                                            //var gridInstance = $('#gridInspectionMaintenance').dxDataGrid('instance');
                                                                            //gridInstance.option("allowColumnReordering", true);
                                                                            //gridInstance.option("headerFilter", true);
                                                                            //e.component.refresh();
                                                                            //stagenew = "";
                                                                            arrdata = [];



                                                                        }
                                                                    }

                                                                });
                                                            },

                                                        });

                                                        if (result_R["items"][0].type == "transection") {


                                                        }

                                                        if (result_R["items"][0].type == "master") {

                                                        }

                                                        //DevExpress.ui.notify("select success", "seccess", 1500);
                                                    } else {
                                                        DevExpress.ui.notify("select error", "error", 1500);
                                                    }
                                                }
                                            });

                                        }
                                    });

                                    dataGrid = $dataGrid.dxDataGrid("instance");

                                    e.component.on("valueChanged", function (args) {
                                        //console.log(args.value);
                                        dataGrid.selectRows(args.value, true);
                                    });
                                    return $dataGrid;
                                }
                            });
                            }

                        },
                    });
                } else {
                    $("#gridBox").dxDropDownBox({
                        dataSource: "",
                        value:"",
                        contentTemplate: function (e) {
                            $dataGrid = $("<div>").dxDataGrid({
                                dataSource: e.component.option("dataSource"),
                            });
                            return $dataGrid;
                        }
                    });
                    var customDialog = DevExpress.ui.dialog.custom({
                        title: 'Warning DocNum',
                        message: 'Not found reccord DocNum: ' + txtDocNum+'.',
                        toolbarItems: [
                            { text: "Close", onClick: function () { return "Ok" } },
                            //{ text: "Not Ok", onClick: function () { return "Not Ok" } }
                        ],
                        width: "500px"

                    });

                    customDialog.show().done(function (dialogResult) {
                        $("#txtDocNum").dxTextBox("instance").focus();

                    });
                }

            } else {
                    var customDialog = DevExpress.ui.dialog.custom({
                        title: 'DocNum error',
                        message: 'Please provide the correct information',
                        toolbarItems: [
                            { text: "Close", onClick: function () { return "Ok" } },
                            //{ text: "Not Ok", onClick: function () { return "Not Ok" } }
                        ],
                        width: "500px"

                    });

                    customDialog.show().done(function (dialogResult) {
                        $("#txtDocNum").dxTextBox("instance").focus();
                    });
                }



        },
        error: function (er) {
            //console.log(er)
            var customDialog = DevExpress.ui.dialog.custom({
                title: 'DocNum error',
                message: 'Please provide the correct information',
                toolbarItems: [
                    { text: "Close", onClick: function () { return "Ok" } },
                ],
                width: "500px"
            });
            customDialog.show().done(function (dialogResult) {
                $("#txtDocNum").dxTextBox("instance").focus();
            });
        }
    });

} else {
    var customDialog = DevExpress.ui.dialog.custom({
        title: 'Error docnum not numeric!',
        message: 'Please input data is numbers',
        toolbarItems: [
            { text: "Close", onClick: function () { return "Ok" } },
        ],
        width: "500px"
    });

    customDialog.show().done(function (dialogResult) {
        $("#txtDocNum").dxTextBox("instance").focus();
    });
}

}
</script>


